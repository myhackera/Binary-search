class Solution:
    def bs(self, arr, low, high, key):
        
        while low <= high:
            mid = low + (high-low)//2
            if arr[mid] == key:
                return mid
            elif arr[mid] >= key:
                high = mid - 1
            else:
                low = mid + 1
        return -1
    
    def minIndex(self, arr):
        
        n = len(arr)
        low = 0
        high = n - 1
        
        while low <= high:
            mid = low + (high-low)//2
            prev = (mid+n-1)%n
            nex = (mid+1)%n
            
            if arr[mid] <= arr[prev] and arr[mid] <= arr[nex]:
                return mid
            elif arr[mid] >= arr[high]:
                low = mid + 1
            else:
                high = mid - 1
        
    def search(self, nums: List[int], target: int) -> int:
        
        # Find Index of minimum element 
        index = self.minIndex(nums)
        low = 0 
        high = len(nums) - 1
        
        # Now we can search target element in nums 
        if target >= nums[index] and target <= nums[high]:
            return self.bs(nums, index, high, target)
        else:
            return self.bs(nums, low, index, target)
            
            
  updated version
  ==============>>>
  
  class Solution:
    def search(self, A : list, l : int, h : int, key : int):
        
        while l <= h:
            
            mid = l + (h-l)//2
            
            if A[mid] == key:
                return mid
            else:
                if A[l] <= A[mid]:
                    if key <= A[mid] and key >= A[l]:
                        h = mid-1
                    else:
                        l = mid+1
                else:
                    if key >= A[mid] and A[h] >= key:
                        l = mid+1 
                    else:
                        h = mid-1
        return -1
                
        
